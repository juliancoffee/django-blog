# Generated by Django 5.1.3 on 2025-01-30 21:38
#
# .. and edited by me later

from typing import Any

from django.db import migrations
from django.db.models import Case, GenericIPAddressField, When
from django.db.models.functions import Cast


def migrate_twostep(Comment: Any) -> None:
    # anyway this code is pretty straightforward
    #
    # if we had "<anon>" here, just place None
    # if we had a proper ip instead, just copy it
    #
    # ORM should properly convert all the types, yes? yes?
    # Nope.
    # It did not.
    #
    # You can use Cast function for that though
    Comment.objects.filter(commenter_ip="<anon>").update(commenter_ip_new=None)
    Comment.objects.exclude(commenter_ip="<anon>").update(
        commenter_ip_new=Cast("commenter_ip", GenericIPAddressField()),
    )


def migrate_with_case(Comment: Any) -> None:
    # This one is more elaborate, but I'm not sure if I prefer it more.
    #
    # This one does everything in one run.
    # But it looks magical, and I don't like magic.
    #
    # In addition, documentation for these seems to be ... lacking, imo.
    #
    # The result seems to be the same though, so that's a good sign.
    Comment.objects.update(
        commenter_ip_new=Case(
            When(commenter_ip="<anon>", then=None),
            default=Cast("commenter_ip", GenericIPAddressField()),
        )
    )


def migrate_to_proper_ip(apps, _schema_editor):
    # NOTE: we're using apps registry because ...
    #
    # Well, if we use import instead, who knows that code we have at that
    # point.
    #
    # app registry makes it proper ... somehow
    # I'd guess it uses datatabase queries for that?
    #
    # well, I couldn't figure it out, I guess I may check source code
    # later
    #
    # TODO: what I did find is that turns out I should place all my models
    # in application root at models.py or models/__init__.py otherwise ORM
    # may break ... so yeah, I should fix it ^^'
    Comment = apps.get_model("blog", "Comment")
    migrate_with_case(Comment)


class Migration(migrations.Migration):
    dependencies = [
        ("blog", "0005_comment_commenter_ip_new"),
    ]

    operations = [
        # RunPython to execute dynamic python code
        #
        # Django won't even show SQL for that, because ... yeah
        migrations.RunPython(migrate_to_proper_ip)
    ]
