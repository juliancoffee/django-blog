#
# THIS WHOLE FILE WAS GENERATED BY CodeRabbitAI
#
# well, almost
#
import logging
import os
from unittest.mock import mock_open, patch

from django.contrib.auth import get_user_model
from django.test import TestCase
from django.test.utils import override_settings
from django.urls import reverse

logging.disable()
User = get_user_model()

# NOTE: this should be the same for all mocked files
#
# I think that's because we are running into some sort of datarace by patching
# globals :(
SAMPLE_LOG = "This is a sample log\nWith multiple lines\nFor testing purposes"


class DevModeViewTests(TestCase):
    """Tests for the devmode app views"""

    def setUp(self):
        """Set up test data"""
        # Create staff user
        self.staff_user = User.objects.create_user(
            username="staffuser",
            email="staff@example.com",
            password="testpassword",
            is_staff=True,
        )

        # Create non-staff user
        self.regular_user = User.objects.create_user(
            username="regularuser",
            email="regular@example.com",
            password="testpassword",
        )

        # URL for the spylog view
        self.spylog_url = reverse("blog:devmode:spylog")

    def test_url_exists_at_desired_location(self):
        """Test that the URL exists at the expected location"""
        self.client.force_login(self.staff_user)
        with patch.dict(os.environ, {"DEVMODE": "1"}):
            response = self.client.get(self.spylog_url)
            self.assertEqual(response.status_code, 200)

    def test_url_accessible_by_name(self):
        """Test that the URL is accessible by name"""
        self.client.force_login(self.staff_user)
        with patch.dict(os.environ, {"DEVMODE": "1"}):
            response = self.client.get(self.spylog_url)
            self.assertEqual(response.status_code, 200)

    def test_staff_user_can_access(self):
        """Test that staff users can access the view"""
        self.client.force_login(self.staff_user)
        with patch.dict(os.environ, {"DEVMODE": "1"}):
            response = self.client.get(self.spylog_url)
            self.assertEqual(response.status_code, 200)

    def test_non_staff_user_cannot_access(self):
        """Test that non-staff users cannot access the view"""
        self.client.force_login(self.regular_user)
        with patch.dict(os.environ, {"DEVMODE": "1"}):
            response = self.client.get(self.spylog_url)
            # Should fail
            self.assertNotEqual(response.status_code, 200)

    def test_anonymous_user_cannot_access(self):
        """Test that anonymous users cannot access the view"""
        with patch.dict(os.environ, {"DEVMODE": "1"}):
            response = self.client.get(self.spylog_url)
            # Should fail
            self.assertNotEqual(response.status_code, 200)

    def test_devmode_required(self):
        """Test that DEVMODE env var is required"""
        self.client.force_login(self.staff_user)
        # Ensure DEVMODE is not set
        with patch.dict(os.environ, {}, clear=True):
            response = self.client.get(self.spylog_url)
            self.assertEqual(response.status_code, 403)
            self.assertIn(
                "sommry, debug view is not enabled", response.content.decode()
            )

    @patch(
        "builtins.open",
        new_callable=mock_open,
        read_data=SAMPLE_LOG,
    )
    def test_debug_log_displayed(self, mock_file):
        """Test that the debug log is displayed correctly"""
        self.client.force_login(self.staff_user)
        with patch.dict(os.environ, {"DEVMODE": "1"}):
            response = self.client.get(self.spylog_url)
            self.assertEqual(response.status_code, 200)
            self.assertTemplateUsed(response, "blog/debug_view.html")
            self.assertContains(response, "This is a sample log")
            self.assertContains(response, "With multiple lines")
            self.assertContains(response, "For testing purposes")

    @override_settings(DEBUG_LOGFILE="/nonexistent/path/to/debug.log")
    def test_file_not_found_error(self):
        """Test handling when debug log file is not found"""
        self.client.force_login(self.staff_user)
        with (
            patch.dict(os.environ, {"DEVMODE": "1"}),
            self.assertRaises(FileNotFoundError),
        ):
            self.client.get(self.spylog_url)

    @patch(
        "builtins.open",
        new_callable=mock_open,
        read_data=SAMPLE_LOG,
    )
    @override_settings(DEBUG_LOGFILE="/path/to/debug.log")
    def test_context_data(self, mock_file):
        """Test that the correct context data is passed to the template"""
        self.client.force_login(self.staff_user)

        with patch.dict(os.environ, {"DEVMODE": "1"}):
            response = self.client.get(self.spylog_url)
            self.assertEqual(response.status_code, 200)
            self.assertEqual(
                response.context["debug_file"], "/path/to/debug.log"
            )
