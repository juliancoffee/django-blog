"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import sys
from pathlib import Path

from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(BASE_DIR / ".env")


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = "DEBUG" in os.environ
# I want to have DEVMODE separate from DEBUG in cases when I need to reproduce
# something in release version, and they might be slightly separate
DEV_MODE = "DEVMODE" in os.environ
DJDT = "DJDT" in os.environ

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ["SECRET_KEY"]

# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/
ALLOWED_HOSTS = ["127.0.0.1", "localhost"]

INTERNAL_IPS = [
    "127.0.0.1",
]

# NOTE: This is rather a hack, imo, but I don't know how to make it better
#
# The issue stems from the fact that I'm using nginx and it somehow breaks
# the origin headers
CSRF_TRUSTED_ORIGINS = ["http://127.0.0.1:8000"]

EXTERNAL_HOSTNAME = os.environ.get("RENDER_EXTERNAL_HOSTNAME")
if EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(EXTERNAL_HOSTNAME)
    CSRF_TRUSTED_ORIGINS.append(f"https://{EXTERNAL_HOSTNAME}")

# Application definition

INSTALLED_APPS = [
    # ours
    "blog.accounts",
    "blog.export",
    "blog",
    # django contrib
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    # yep, it does what it says, it crashes Django
    # "mysite.middleware.CrashMiddleware",
    # this one is for better debugging than out-of-the-box one
    # "verbose_csrf_middleware.CsrfViewMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    # make ALL requests require authentication by default
    # yeah, I got this idea from OWASP
    "django.contrib.auth.middleware.LoginRequiredMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

if DJDT:
    INSTALLED_APPS = [
        "debug_toolbar",
        *INSTALLED_APPS,
    ]
    MIDDLEWARE = [
        *MIDDLEWARE,
        "debug_toolbar.middleware.DebugToolbarMiddleware",
    ]

# logging configuration
DEBUG_LOGFILE = BASE_DIR / "debug.log"


def console_handler(
    *,
    fmt: str = "classic",
    level: str = os.environ.get("CONSOLE_LOG_LEVEL", "DEBUG"),
):
    return {
        "level": level,
        "formatter": fmt,
        "class": "logging.StreamHandler",
    }


def logfile_handler(
    *,
    fmt: str = "classic",
    level: str = "DEBUG",
):
    return {
        "level": level,
        "formatter": fmt,
        "class": "logging.FileHandler",
        "filename": DEBUG_LOGFILE,
    }


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "classic": {
            "format": "{asctime} [{levelname}] [{name}] {message}",
            "datefmt": "%H:%M:%S",
            "style": "{",
        },
        "min": {
            "format": "{message}",
            "style": "{",
        },
    },
    "handlers": {
        # console
        "console": console_handler(),
        "console_minfmt": console_handler(fmt="min"),
        # log file
        "logfile": logfile_handler(),
        "logfile_minfmt": logfile_handler(fmt="min"),
    },
    "root": {
        "handlers": ["console", "logfile"],
        "level": os.environ.get("PYLOG_LEVEL", "INFO"),
    },
    "loggers": {
        "django": {
            "handlers": ["console", "logfile"],
            "level": os.environ.get("DJANGO_LOG_LEVEL", "INFO"),
            "propagate": False,
        },
        "django.utils.autoreload": {
            # I don't want to see this stuff in my logfile
            "handlers": ["console"],
            "propagate": False,
            # explicitly set to INFO to ignore its debug tracing
            "level": "INFO",
        },
        "gunicorn": {
            # p. s. gunicorn already has own formatting, let it keep it
            "handlers": ["console_minfmt", "logfile_minfmt"],
            "propagate": False,
            # NOTE:
            # gunicorn has two kinds of access logs
            # - debug logs with DEBUG level
            # - proper access log if you enable --access_logfile, on INFO level
            #
            # If you enable gunicorn's DEBUG level and access logs, you'll get
            # both
            "level": os.environ.get("GUNICORN_LOG_LEVEL", "INFO"),
        },
    },
}

ROOT_URLCONF = "mysite.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "mysite.context_processors.dev_mode",
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "mysite.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases


# run tests against sqlite3
if "test" in sys.argv:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": "test_db",
        },
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.environ.get("DB_NAME", "postgres"),
            "USER": os.environ.get("DB_USER", "postgres"),
            "PASSWORD": os.environ["DB_PASSWORD"],
            "HOST": os.environ["DB_HOST"],
            "PORT": os.environ.get("DB_PORT", "5432"),
        },
    }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/Kyiv"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

if not DEBUG and "test" not in sys.argv:
    # that's what WhiteNoise and render.io recommend
    # if used with `manage.py collectstatic`
    STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

if not DEBUG and "test" not in sys.argv:
    STORAGES = {
        "staticfiles": {
            "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage"
        }
    }

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
